{"name":"R pure","tagline":"Workflow for flood frequency analysis under uncertainty (still work in progress!)","body":"PURE (R package)\r\n================\r\n\r\nWorkflow for flood frequency analysis under uncertainty (still work in progress!).\r\n\r\nProject: PURE (Probability, Uncertainty and Risk in the Environment) - RACER consortium (Flood strand)\r\n\r\nCheck out: NERC-PURE programme at http://www.nerc.ac.uk/research/programmes/pure/.\r\n\r\nRequirements:\r\nsudo apt-get install libudunits2-dev\r\ninstall.packages(\"udunits2\")\r\ninstall.packages(\"outliers\")\r\ninstall.packages(\"hydroTSM\")\r\n\r\n\r\n#### Basics\r\nInstall and load packages\r\n```R\r\n# Install dependent packages from CRAN:\r\nx <- c(\"zoo\", \"chron\", \"xts\", \"manipulate\", \"udunits2\", \"outliers\", \"rgdal\", \r\n       \"sp\", \"gstat\", \"grid\", \"hydroTSM\", \"Hmisc\", \"raster\", \"reshape2\", \r\n       \"ggplot2\", \"qualV\", \"lhs\", \"MASS\")\r\n# install.packages(x)\r\nlapply(x, require, character.only=T); rm(x)\r\n\r\n# Install dpendent package from R-Forge:\r\n# install.packages(\"fuse\", repos=\"http://R-Forge.R-project.org\")\r\nlibrary(fuse)\r\n\r\n# Install dependent gists and packages from github:\r\nlibrary(devtools)\r\n\r\n# install_github(\"r_rnrfa\", username = \"cvitolo\", subdir = \"rnrfa\")\r\nlibrary(rnrfa)\r\n\r\n# Install pure package\r\n# install_github(\"r_pure\", username = \"cvitolo\", subdir = \"pure\")\r\nlibrary(pure)\r\n```\r\n\r\nMake zoo objects for your time series: \r\n\r\n* Q is the streamflow time series. \r\n* E is the list of potential evapotranspiration time series. If E is unknown, wheather variables can be used to calculate the potential evapotranspiration (see section PET).\r\n* P is the list of rainfall time series. If there are 3 raingauges in the catchment (e.g. P1, P2 and P3), the object P is: \r\n    + P <- list(P1,P2,P3)\r\n\r\nAn example is given below:\r\n```R\r\n# Load sample time series (this contains 3 objects: P, E and Q)\r\ndata(P1)\r\ndata(P2)\r\ndata(P3)\r\ndata(Q)\r\ndata(weather)\r\n```\r\n\r\n### Pre-processing\r\nBelow are a series of utility functions for time series pre-processing, divided in 4 categories: \r\n\r\n* Report\r\n* Correct\r\n* Aggregate\r\n* Model specific preparation\r\n\r\n##### Report\r\nReport problems with time series using the function `ScanTS()`.\r\nAs an example you can use the example dataset provided with this package.\r\n\r\n```R\r\n# Report\r\nScanTS( P1, verbose = TRUE  )\r\nScanTS( P2, verbose = FALSE )\r\nScanTS( P3, verbose = FALSE )\r\nScanTS( Q,  verbose = FALSE )\r\nScanTS( weather$TD,  verbose = FALSE, returnNegInfo = FALSE )\r\nScanTS( weather$TW,  verbose = FALSE, returnNegInfo = FALSE )\r\nScanTS( weather$NR,  verbose = FALSE, returnNegInfo = FALSE )\r\nScanTS( weather$WS,  verbose = FALSE )\r\n```\r\n\r\n##### Correct, aggregate and prepare for modelling with FUSE\r\nOften time series are recorded at non-regular time steps. You can shift your records to align them with a regular grid using the function `Irr2Reg()`.\r\n```R\r\n# From irregular to regular frequency time step:\r\nP1Reg <- Irr2Reg( P1 )\r\nP2Reg <- Irr2Reg( P2 )\r\nP3Reg <- Irr2Reg( P3 )\r\nQReg  <- Irr2Reg( Q )\r\nTW    <- Irr2Reg( weather$TW )\r\nTD    <- Irr2Reg( weather$TD )\r\nNR    <- Irr2Reg( weather$NR )\r\nWS    <- Irr2Reg( weather$WS )\r\n\r\n# test the effect of Irr2Reg()\r\nplot(P1[40:45])\r\nlines(P1Reg[40:45],col=\"red\")\r\n```\r\n\r\nChange any unrealistic values to NA (e.g. negative P and Q) using the function `CorrectNeg()`. \r\n\r\n```R\r\nP1NoNeg <- CorrectNeg( P1Reg )\r\n\r\n# test the effect of CorrectNeg()\r\nplot(P1Reg)\r\nlines(P1NoNeg,col=\"red\")\r\n```\r\n\r\nFind coarser temporal resolution amongst a list of time series:\r\n```R\r\nmyList <- list(\"P1\" = P1NoNeg, \"P2\" = P2Reg, \"P3\" = P3Reg, \r\n               \"Q\" = QReg, \"TW\" = TW, \"TD\" = TD, \"NR\" = NR, \"WS\" = WS)\r\nmultiplier <- CommonTemporalResolution(myList); multiplier\r\n```\r\n\r\nAggregate all the time series to the temporal resolution above:\r\n```R\r\nP1 <- aggregate(myList$P1, align.time(index(myList$P1), multiplier), FUN = sum)\r\nP2 <- aggregate(myList$P2, align.time(index(myList$P2), multiplier), FUN = sum)\r\nP3 <- aggregate(myList$P3, align.time(index(myList$P3), multiplier), FUN = sum)\r\nTW <- aggregate(myList$TW, align.time(index(myList$TW), multiplier), FUN = mean)\r\nTD <- aggregate(myList$TD, align.time(index(myList$TD), multiplier), FUN = mean)\r\nNR <- aggregate(myList$NR, align.time(index(myList$NR), multiplier), FUN = mean)\r\nWS <- aggregate(myList$WS, align.time(index(myList$WS), multiplier), FUN = mean)\r\nQ  <- aggregate(myList$Q,  align.time(index(myList$Q ), multiplier), FUN = mean)\r\n\r\nplot(myList$Q[1:100])\r\nlines(Q[1:100],col=\"red\")\r\n```\r\n\r\nDerive new variables, e.g. potential evapotranspiration from weather variables\r\n```R\r\nE <- pet(stationElevation=0,TD,TW,NR,WS)\r\n```\r\n\r\nSelect periods with simultaneous recordings\r\n```R\r\ntsList <- list(\"P1\" = P1, \"P2\" = P2, \"P3\" = P3, \"E\" = E, \"Q\" = Q)\r\nnewList <- ExtractOverlappingPeriod(tsList)\r\n```\r\n\r\nAggregate in space, e.g. areal averaging using spatial interpolation methods\r\n```R\r\ntsList <- data.frame(index(newList),\"P1\"=newList$P1,\r\n                     \"P2\"=newList$P2,\"P2\"=newList$P3)\r\nP <- ArealAveraging(tsList,areas=c(0.3,0.6,0.1),interpolationMethod =\"Thiessen\")\r\n```\r\n\r\nCheck if there are gaps in the records and infill\r\n```R\r\nany(is.na(P)) # FALSE\r\n\r\nany(is.na(newList$E)) # This returns TRUE, therefore we will infill the missing values\r\nEnomissing <- na.approx(newList$E)\r\n\r\nany(is.na(newList$Q)) # This returns TRUE, therefore we will infill the missing values\r\nQnomissing <- na.approx(newList$Q)\r\n```\r\n\r\nIf necessary, convert units to mm/day:\r\n```R\r\nP <- P*24 # from mm/h to mm/day\r\nE <- Enomissing*24 # from mm/h to mm/day\r\n\r\nArea <- 10.55 # Km2\r\nQ <- Qnomissing*86.4/Area\r\n```\r\n\r\nMerge P, E and Q in 1 time series object\r\n```R\r\nDATA <- merge(P,E,Q)\r\n```   \r\n\r\n# Leave your feedback\r\nI would greatly appreciate if you could leave your feedbacks via email (cvitolodev@gmail.com).\r\n","google":"UA-44379190-4","note":"Don't delete this file! It's used internally to help with page regeneration."}